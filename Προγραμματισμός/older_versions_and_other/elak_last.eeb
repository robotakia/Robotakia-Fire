<xml xmlns="http://www.w3.org/1999/xhtml">
  <block type="new_event_start" id="vPEah;f,5Vq@@LR1BgJI" deletable="false" movable="false" x="18" y="148">
    <next>
      <block type="control_loop_forever" id="3KaR6QQ=-bou-I%XR7AY">
        <statement name="SUBSTACK">
          <block type="light_sound_LED" id="6kaAXLzVOko!oG;ZIm6|">
            <value name="CHOICE">
              <shadow type="dropdown_light_sound_LED" id="[LdEg^N[`Q9([AvXHuCR">
                <field name="CHOICE">bothOn</field>
              </shadow>
            </value>
            <next>
              <block type="control_loop_number" id="z/N/Y4or`s{D]B52NlPg">
                <statement name="SUBSTACK">
                  <block type="drive_left_event" id="5}7aQ5Mzh_a;-gYyA^4B">
                    <value name="CHOICE">
                      <shadow type="dropdown_drive_setleft_event" id="3{+F54teNN0UI`i#2vrg">
                        <field name="CHOICE">black</field>
                      </shadow>
                    </value>
                    <next>
                      <block type="drive_right_event" id="Rfn_Kx_KjMm:aENW:rOQ">
                        <value name="CHOICE">
                          <shadow type="dropdown_drive_setright_event" id="T^,yYDq14USVovTdXIlV">
                            <field name="CHOICE">white</field>
                          </shadow>
                        </value>
                      </block>
                    </next>
                  </block>
                </statement>
                <value name="TIMES">
                  <shadow type="math_whole_number" id="9ah1EIZYnU1I+th{3HTE">
                    <field name="NUM">10</field>
                  </shadow>
                </value>
                <next>
                  <block type="drive_left_event" id="~yJwWZ(PkGh?}Ckf-8=+">
                    <value name="CHOICE">
                      <shadow type="dropdown_drive_setleft_event" id="(Z{i_bvG#jQKH;DG?mHm">
                        <field name="CHOICE">black</field>
                      </shadow>
                    </value>
                    <next>
                      <block type="light_sound_LED" id="C-Q^bdSuJziJLnpye~5,">
                        <value name="CHOICE">
                          <shadow type="dropdown_light_sound_LED" id="#A.I2v%rcT{V)PDx7]+F">
                            <field name="CHOICE">bothOff</field>
                          </shadow>
                        </value>
                        <next>
                          <block type="control_wait_time" id="c]}wlX(gm0q]heH8k9*6">
                            <value name="DURATION">
                              <shadow type="math_positive_number" id="|t`hJsGZ}LEle)NS*##!">
                                <field name="NUM">1</field>
                              </shadow>
                            </value>
                          </block>
                        </next>
                      </block>
                    </next>
                  </block>
                </next>
              </block>
            </next>
          </block>
        </statement>
      </block>
    </next>
  </block>
  <block type="new_event_clap_one" id="|6,naKZ1[jMxqpl9yq#c" x="90" y="292">
    <next>
      <block type="light_sound_LED" id="FH9:s2:gzVloTb%d_|hb">
        <value name="CHOICE">
          <shadow type="dropdown_light_sound_LED" id="TXO%d~-e.3D4SJEO(d|4">
            <field name="CHOICE">leftOn</field>
          </shadow>
        </value>
        <next>
          <block type="drive_forwards_time" id="-oQt=CbftHgJL6qhMt6X">
            <value name="DURATION">
              <shadow type="math_positive_number" id="`7=o-MEU_E;!CrmG,O|[">
                <field name="NUM">0.2</field>
              </shadow>
            </value>
            <next>
              <block type="drive_left_time" id="`IfISf3^:e~mRk2Otsbh">
                <value name="DURATION">
                  <shadow type="math_positive_number" id="I7_X~z?g+HUW647~47s,">
                    <field name="NUM">0.2</field>
                  </shadow>
                </value>
                <next>
                  <block type="control_loop_number" id="EQSrd3~P4qY3WT}s~.k4">
                    <statement name="SUBSTACK">
                      <block type="drive_left_event" id="qSnHy,}JAH{TfKu8WuRA">
                        <value name="CHOICE">
                          <shadow type="dropdown_drive_setleft_event" id="3hlR83m#VmssV^SHb8-Y">
                            <field name="CHOICE">black</field>
                          </shadow>
                        </value>
                        <next>
                          <block type="drive_right_event" id="B-s6A!3ERroN.Ch(Dsrl">
                            <value name="CHOICE">
                              <shadow type="dropdown_drive_setright_event" id="3!A}wt8SA|L}Ws97^K@Q">
                                <field name="CHOICE">white</field>
                              </shadow>
                            </value>
                          </block>
                        </next>
                      </block>
                    </statement>
                    <value name="TIMES">
                      <shadow type="math_whole_number" id="9-RdKsn(v}wA|83`=Yww">
                        <field name="NUM">7</field>
                      </shadow>
                    </value>
                    <next>
                      <block type="drive_forwards_time" id="C[9Su!:cv#i{gRQY!a_w">
                        <value name="DURATION">
                          <shadow type="math_positive_number" id="6{!oCgx-AhX;f~n~S:I[">
                            <field name="NUM">0.2</field>
                          </shadow>
                        </value>
                      </block>
                    </next>
                  </block>
                </next>
              </block>
            </next>
          </block>
        </next>
      </block>
    </next>
  </block>
</xml>